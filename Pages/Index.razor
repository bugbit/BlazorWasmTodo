@page "/"
@using Microsoft.EntityFrameworkCore;
@using BlazorWasmTodo.Services
@inject TodoDbContext context
@inject SyncServices syncSrv

<PageTitle>Index</PageTitle>

@*<p>Saved in memory, only available in memory for the current browser tab.</p>*@
<p>Persist data to origin private file system with actual physical path provided by your browser.</p>

<ul>
    @foreach (var todo in todos)
    {
        Func<Task> action = async () => await this.TodoChangedAsync(todo);
        <li>
            <input type="checkbox" @bind="todo.IsDone" @bind:after="action" />
            <input @bind="todo.Title" @bind:after="action" />
        </li>
    }
</ul>

<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodoAsync">Add todo</button>
<button @onclick="ResetBDAsync">Reset BD</button>

@code
{
    private string? newTodo;
    private List<TodoItem> todos = new();

    protected override async Task OnInitializedAsync()
    {
        // pasado al program.cs
        //await context.Database.EnsureCreatedAsync();

        todos = await context.TodoItem.ToListAsync();

        await base.OnInitializedAsync();
    }

    private async Task AddTodoAsync()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            context.TodoItem.Add(new TodoItem { Title = newTodo });

            newTodo = string.Empty;

            await context.SaveChangesAsync();

            todos = await context.TodoItem.ToListAsync();
        }
    }

    private async Task TodoChangedAsync(TodoItem todo)
    {
        context.TodoItem.Entry(todo).State = EntityState.Modified;

        await context.SaveChangesAsync();
    }

    private async Task ResetBDAsync()
    {
        await syncSrv.EnsureDeletedAsync(context);

        todos = await context.TodoItem.ToListAsync();
    }
}